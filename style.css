#code {
    width: 550px;
    border-radius: 50% 20% / 10% 40%;
}

span {
    color: yellowgreen;
}

h1 {
    background-color: #f1f1f1;
    text-align: center;
    /* hex colors can be shortened to 3 digits if each pair is the same */
    /* e.g. #cc55ee can be written as #c5e */
    letter-spacing: 3px;
}

/* pseudo classes */
h1:hover {
    letter-spacing: 10px;
}

h2 {
    background-color: rgb(241, 241, 241);
    font-weight: 400;
}

thead {
    text-align: left;
    /* text-decoration: red underline wavy; */
    /* if a font is unlikely to be built in to a browser/OS, you can list the order of
    preference for other fonts */
    /* e.g. if Verdana isn't available on a Mac, Futura will be used */
    /* this can also be done with serif, sans serif, fantasy, etc. */
    font-family: Verdana, Futura, Arial;
}


ol {
    line-height: 2;
}

/* descendant selector; in this case, all <a>'s nested in an <li> */
li a {
    color: blue;
}

/* all buttons preceded by an input */
input + button {
    background-color: orange;
}

/* all labels that are direct descendants of a <div> */
div > label {
    text-decoration: purple underline dashed;
}

input[type="password"] {
    color: rgb(143, 55, 202);
}

/* pseudo class */
tr:nth-of-type(2n) {
    background-color: #e6e6e6;
}

/* pseudo elements */
h2::first-letter {
    font-size: 28px;
}

/* changes the h1 background to purple when you select */
h1::selection {
    background-color: rgba(71, 4, 71, 0.5); /* only affects the property */
}

td {
    border-width: 2px; /* this on its own doesn't do anything; we need color/style*/
    border-color: black;
    border-style: solid;
    border-left-width: 3px;
    box-sizing: border-box; /* sets the border boundaries at the box boundary rather than adding on to it*/
}

th {
    border: 3px purple inset;
    padding: 5px;
}

table {
    padding: 5px;
    opacity: 0.5; /* affects the whole element, text included */
}

/* 
Position
    - Static: default
    - Relative: now you can use top, left, bottom, and right to move it relative to where its default position is
    - Absolute: the element is removed from it's normal flow in the document

*/


/*  
Relative Units
    - % is always relative to some other value
        - For width & height, it is a percentage of the parent's width and height
    - em 
        - In font-size, refers to the font-size of the parent
        - With margin, border-radius, etc., it refers to the current element's font-size
        - Can compound with nested elements like lists
        - Good for button padding or other things that you want to scale
    - rem (root em)
        - Relative to the root html element's font size
        - Good for most cases; how you want something to look compared to the rest of the document

*/

/* 
    Padding is the space between content box and the border 
        - You can specify padding-left, padding-right etc.
        - You can also do padding: 10px which adds 10px to all four sides
            - Two values: vertical | horizontal
            - Three values: top | horizontal | bottom
            - Four values: top | right | bottom | left
    Margin is the space outside of an element's border, between that element and something else

    Display Property
        - Inline: width & height ignored; margin & padding push elements away horizontally
        - Block: break the flow; width, height, margin, and padding are respected
        - Inline-block: behaves like an inline element except width, height, margin, & padding are respected
*/


/* The order that styles appear matters. Cascade > the first style will appear but it will
be overwritten if the same selector is styled to something else  */

/* Specificity
    - how the browser decides which rules to apply when multiple rules could apply to the 
      same element
    - the more specific selector in any case will win out
        - ID > Class > Element
        - if you want something to win out over everything else, you can put !important
            at the end
*/

/* CSS Inheritance
    - Child data types can inherit styles from parent data types
    - Ex. setting the body color to purple will make most elements purple
        - Some don't inherit styles by default like buttons and inputs
        - You can force them to inherit styles by using data type: inherit;
*/